
#include "LPC21xx.h"
#include "interface.h"
#include "system.h"
#include "simple_fat.h"
#include "sd_raw.h"
#include "printf.h"

extern unsigned char sdBuf[];
extern unsigned int sfs_size;  // in bytes
extern unsigned int sfs_start;  // in sectors
extern unsigned int sfs_audio_start;  // in sectors
extern unsigned int sfs_audio_size;  // in bytes

// these are addresses in sectors
unsigned int addr_boot_sector = 0;
unsigned int addr_FAT_1 = 0;
unsigned int addr_FAT_2 = 0;
unsigned int addr_root_dir = 0;
unsigned int addr_data_start = 0;
unsigned int addr_sounds_directory = 0;

// fat params
unsigned int total_sectors = 0;
unsigned int num_reserved_sectors = 0;
unsigned int sectors_per_fat = 0;
unsigned int sectors_per_cluster = 0;
unsigned int num_root_entries = 0;
unsigned int num_fats = 0;

//    
unsigned int total_files = 0;

// Look for 'FAT16' to find boot sector.  it will be at offset 0x36
void fat_locate_boot_sector (void) {
	  unsigned int i, j, k = 0;

// TODO:  make sure we error out if the block (sector) size is not 512....
    // initialize mem card
    // error out if there is a problem
    if (sd_raw_init())
        printf("card found \n\r");
    else
        error_out(NO_CARD_ERROR); // card not found error


    // is this really necessary????? it seems it needs to do a few 'reads' to get warmed up
    /// print a secotr
/*    for(k = 0; k < 1000; k++){
        //for (i = 0; i < 512; i++){ // reset buf   
        //    sdBuf[i] = 77;
        //}
        //j = 0;
        readSector(k, sdBuf);
        printf("sec\r\n");
          //j = 0;
        //for (i = 0; i < 512; i++){
            //if (!j)
               // printf("\r\n");
            //j++;
            //j &= 0xf;
            //printf("%d, ", sdBuf[i]);
        //}//printf("\r\n");printf("\r\n");
    }*/
    // end print a sector

	  printf("searching for boot sector\r\n");
	
	  for (i =0; i < 1024; i++){    // search 1024 sectors
		    sd_raw_read(i * 512, sdBuf, 512);
		    if ((sdBuf[54] == 'F') && (sdBuf[55] == 'A') && (sdBuf[56] == 'T') && (sdBuf[57] == '1') && (sdBuf[58] == '6')){
			      printf("FAT16 boot sector found at sector: %d\r\n",  i);
			      addr_boot_sector = i;
			      return;
		    }	
	  }
    error_out(NO_FAT_ERROR);
}

void fat_get_partition_info(void){
	
	sd_raw_read(addr_boot_sector * 512, sdBuf, 512);

	sectors_per_cluster = sdBuf[0xd];
	num_reserved_sectors = sdBuf[0xe];
	num_fats = sdBuf[0x10];
	num_root_entries = sdBuf[0x11] | (sdBuf[0x12] << 8);
	sectors_per_fat = sdBuf[0x16] | (sdBuf[0x17] << 8);
	total_sectors = sdBuf[0x20] | (sdBuf[0x21] << 8) | (sdBuf[0x22] << 16) | (sdBuf[0x23] << 24);

	addr_FAT_1 = addr_boot_sector + num_reserved_sectors;
	addr_FAT_2 = addr_FAT_1 + sectors_per_fat;
	addr_root_dir = addr_FAT_2 + sectors_per_fat;
	addr_data_start = addr_root_dir + ((num_root_entries * 32) / 512);

	printf("address FAT 1: %d\r\n", addr_FAT_1);
	printf("address FAT 2: %d\r\n", addr_FAT_2);
	printf("address root dir: %d\r\n", addr_root_dir);
	printf("number sectors per cluster: %d\r\n", sectors_per_cluster);
	printf("number reserved sectors: %d\r\n", num_reserved_sectors);
	printf("number of FAT: %d\r\n", num_fats);
	printf("number root entries: %d\r\n", num_root_entries);
	printf("number sectors per FAT: %d\r\n", sectors_per_fat);
	printf("total sectors in data area: %d \r\n", total_sectors - (addr_data_start - addr_boot_sector));
	printf("total sectors in partition: %d \r\n", total_sectors);
    printf("disk size: %d M\r\n", (sectors_per_fat * sectors_per_cluster * 512 * 256));
  
  //TODO: some arithmetic to check fat checks out, and return error if not
	total_sectors = total_sectors - num_reserved_sectors - (num_fats * sectors_per_fat) - ((num_root_entries * 32) / 512);
 

    entry_offset = (total_files & 0xf ) << 5;     // 32 bytes per entry
   
    // read in the info
	sd_raw_read((sector_offset + addr_sounds_directory) * 512, sdBuf, 512);

	// make entry
	sdBuf[0 + entry_offset] = fname[0];
	sdBuf[1 + entry_offset] = fname[1];
	sdBuf[2 + entry_offset] = fname[2];
	sdBuf[3 + entry_offset] = fname[3];
	sdBuf[4 + entry_offset] = fname[4];
	sdBuf[5 + entry_offset] = fname[5];
	sdBuf[6 + entry_offset] = fname[6];
	sdBuf[7 + entry_offset] = fname[7];
	sdBuf[8 + entry_offset] = fname[8];
	sdBuf[9 + entry_offset] = fname[9];
	sdBuf[10 + entry_offset] = fname[10];
	sdBuf[0x1a] = 10 + total_files;   // 1st cluster
	sdBuf[0x0b] = 0x0; //  no attribute

	sdBuf[0x1c] = size & 0xff;   // directory size
	sdBuf[0x1d] = (size >> 8) & 0xff;
	sdBuf[0x1e] = (size >> 16) & 0xff;
	sdBuf[0x1f] = (size >> 24) & 0xff;

    // location of sounds directory table
	sd_raw_write((sector_offset + addr_sounds_directory) * 512, sdBuf, 512);
	
	printf("wrote file %s\r\n", fname);
}

// writes one big file
void fat_create_file (void){
	unsigned int i = 0;
	unsigned int size = 0;
	unsigned int fat_count = 0;

    for (i = 0; i < 512; i++) {
        sdBuf[i] = 0;
    }

	// make entry in root directory
	sdBuf[0] = 'S';
	sdBuf[1] = 'O';
	sdBuf[2] = 'U';
	sdBuf[3] = 'N';
	sdBuf[4] = 'D';
	sdBuf[5] = 'S';
	sdBuf[6] = 'S';
	sdBuf[7] = 'S';
	sdBuf[8] = 'W';
	sdBuf[9] = 'A';
	sdBuf[10] = 'V';
	sdBuf[0x1a] = 3;   // so file ends up starting on addr_data_start + 1 cluster
	sdBuf[0x0b] = 0x01; // read only

  // total numer of bytes = sectors / fat --take away 2 for good measure-- * FAT entries / sector  *  512 bytes / sector
  size = (sectors_per_fat - 2) * 256 * sectors_per_cluster * 512;
   
  // set size used by sfs and record systems
  sfs_size = size;

	sdBuf[0x1c] = size & 0xff;   // file size
	sdBuf[0x1d] = (size >> 8) & 0xff;
	sdBuf[0x1e] = (size >> 16) & 0xff;
	sdBuf[0x1f] = (size >> 24) & 0xff;

	sd_raw_write(addr_root_dir * 512, sdBuf, 512);

	// now write wave header
  sdBuf[0] = 0x52; // R
  sdBuf[1] = 0x49; // I
  sdBuf[2] = 0x46; // F
  sdBuf[3] = 0x46; // F
  sdBuf[4] = (sfs_size - 8) & 0xff;
  sdBuf[5] = ((sfs_size - 8) >> 8) & 0xff;
  sdBuf[6] = ((sfs_size - 8) >> 16) & 0xff;
  sdBuf[7] = ((sfs_size - 8) >> 24) & 0xff;
  sdBuf[8] = 0x57;  // W
  sdBuf[9] = 0x41;  // A
  sdBuf[10] = 0x56; // V
  sdBuf[11] = 0x45; // E
  sdBuf[12] = 0x66; // f
  sdBuf[13] = 0x6d; // m
  sdBuf[14] = 0x74; // t
  sdBuf[15] = 0x20;
  sdBuf[16] = 0x10;
  sdBuf[17] = 0x00;
  sdBuf[18] = 0x00;
  sdBuf[19] = 0x00;
  sdBuf[20] = 0x01;
  sdBuf[21] = 0x00;
  sdBuf[22] = 0x01;
  sdBuf[23] = 0x00;
  sdBuf[24] = 0x22;
  sdBuf[25] = 0x56;
  sdBuf[26] = 0x00;
  sdBuf[27] = 0x00;
  sdBuf[28] = 0x44;
  sdBuf[29] = 0xac;
  sdBuf[30] = 0x00;
  sdBuf[31] = 0x00;
  sdBuf[32] = 0x02;
  sdBuf[33] = 0x00;
  sdBuf[34] = 0x10;
  sdBuf[35] = 0x00;
  sdBuf[36] = 0x64; // d
  sdBuf[37] = 0x61; // a
  sdBuf[38] = 0x74; // t
  sdBuf[39] = 0x61; // a
  sdBuf[40] = (sfs_size - 8) & 0xff;;
  sdBuf[41] = ((sfs_size - 8) >> 8) & 0xff;
  sdBuf[42] = ((sfs_size - 8) >> 16) & 0xff;
  sdBuf[43] = ((sfs_size - 8) >> 24) & 0xff;

  // file starts at beginning of second cluster 
	sd_raw_write((addr_data_start + sectors_per_cluster) * 512, sdBuf, 512);

  // set global data start locations
  // add 1 sector to the start location becase 1st sector is the wave header 
  sfs_start =  sectors_per_cluster + addr_data_start + 1;
  sfs_audio_start = sfs_start + SFS_OFFSET;

  // now write FAT tables for the one big file
	// get size in clusters
	size /= 512;
	size /= sectors_per_cluster;

	// starts at 3 so ends at:
	size += 3;
	
	// why is this necessary ? 
	//readSector(addr_FAT_1, sdBuf);

    // put the correct stuff in clusters 0, 1, 2
  sdBuf[0] = 0xf8; 
  sdBuf[1] = 0xff;
  sdBuf[2] = 0xff;
  sdBuf[3] = 0xff;
  sdBuf[4] = 0x00;
  sdBuf[5] = 0x00;

  // starting from the 3rd cluseter, write single contigous list
  fat_count = 3;

  while (fat_count < size) { 
      fat_count++;
      sdBuf[(fat_count * 2 - 1) & 0x1ff] = fat_count >> 8;
      sdBuf[(fat_count * 2 - 2) & 0x1ff] = fat_count & 0xff;
      if (((fat_count * 2 - 1) & 0x1ff) == 511) {
        sd_raw_write((addr_FAT_1 + ((fat_count * 2 - 1) / 512)) * 512, sdBuf, 512);
        sd_raw_write((addr_FAT_2 + ((fat_count * 2 - 1) / 512)) * 512, sdBuf, 512);
        // i guess we read in the old stuff to preserve anything that was there ? neccessary ?
        //readSector(addr_FAT_1 + ((fat_count * 2 - 1) / 512) + 1, sdBuf);
        //printf("wrote sec: %d, fat count: %d, \r\n", fat_count / 512, fat_count);
      }
  }

  fat_count++;
  // insert 0xff for finishing cluster
  sdBuf[(fat_count * 2 - 1) & 0x1ff] = 0xff;
  sdBuf[(fat_count * 2 - 2) & 0x1ff] = 0xff;
  
  // write finishing cluster
  sd_raw_write((addr_FAT_1 + ((fat_count * 2 - 1) / 512)) * 512, sdBuf, 512);
  sd_raw_write((addr_FAT_2 + ((fat_count * 2 - 1) / 512)) * 512, sdBuf, 512);

	printf("wrote file\r\n");
}

void fat_locate_sfs(void){

	printf("searching for sfs\r\n");
		
	sd_raw_read(addr_root_dir * 512, sdBuf, 512);

  // it will be the first entry
  if (sdBuf[0] == 'S' &&
      sdBuf[1] == 'O' &&
      sdBuf[2] == 'U' &&
      sdBuf[3] == 'N' &&
      sdBuf[4] == 'D' &&
      sdBuf[5] == 'S' &&
      sdBuf[6] == 'S' &&
      sdBuf[7] == 'S' &&
      sdBuf[8] == 'W' &&
      sdBuf[9] == 'A' &&
      sdBuf[10] == 'V'){

    printf("sfs sound file found\r\n");

    sfs_size = 0;
    sfs_size |= sdBuf[0x1f] << 24;
    sfs_size |= sdBuf[0x1e] << 16;
    sfs_size |= sdBuf[0x1d] << 8;
    sfs_size |= sdBuf[0x1c] << 0;

    printf("sfs size: %d\r\n", sfs_size);

    // just assume it starts at addr_data_start + 1 cluster since we wrote the file ....
    // add 1 sector to the start location becase 1st sector is the wave header 
    sfs_start =  sectors_per_cluster + addr_data_start + 1;
    sfs_audio_start = sfs_start + SFS_OFFSET;
    sfs_audio_size = sfs_size - (SFS_OFFSET * 512) - 512;
  
    printf("sfs start: %d\r\n", sfs_start);
    printf("sfs audio start: %d\r\n", sfs_audio_start);
    printf("sfs audio size: %d\r\n", sfs_audio_size);
    // TODO: check start of file (WAVE, audio start marker)
    // return error if not found
  }
  else {
    error_out(NO_SFS_ERROR);
  }
}

		

